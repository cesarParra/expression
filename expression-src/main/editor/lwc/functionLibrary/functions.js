export const data = [
  {
    "category": "Collection",
    "values": [
      {
        "name": "AGGREGATEGROUPS",
        "autoCompleteValue": "AGGREGATEGROUPS(",
        "description": "Applies the given aggregator to each group in the given grouping, returning<br/>the results together as a map with the respective group keys.<br/>Accepts 2 arguments: the grouping to aggregate and the expression to evaluate.<br/>Provides the following special variables in the inner expression:<br/>- `$current` (the current item being iterated over).<br/>- `$key` (the current group key).<br/>- `$isFirst` (true if the current item is the first in the group).<br/>- `$acc` (the current accumulator value).",
        "examples": [
          "AGGREGATEGROUPS({ \"a\": [1, 2], \"b\": [3, 4] }, IF($isFirst, $current, SUM([$acc, $current])) // { \"a\": 3, \"b\": 7 }"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "ANY",
        "autoCompleteValue": "ANY(",
        "description": "Returns true if any element in the list matches the given expression.<br/>Provides 1 special variable in the inner expression: `$current` (the current item being iterated over).<br/>Accepts 2 arguments: the list to evaluate and the expression to evaluate.",
        "examples": [
          "ANY([1, 2, 3], $current = 2) // true"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "APPEND",
        "autoCompleteValue": "APPEND(",
        "description": "Appends an item to a list.<br/>Accepts 2 arguments: the list and the item to append.",
        "examples": [
          "APPEND(LIST(1, 2, 3), 4) // [1, 2, 3, 4]"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "ASSOCIATEBY",
        "autoCompleteValue": "ASSOCIATEBY(",
        "description": "Creates a map by associating each element of the input list with a key<br/>generated by the given expression.<br/>Accepts 2 arguments: the list to evaluate and the expression to evaluate.<br/>Provides the following special variables in the inner expression:<br/>- `$current` (the current item being iterated over).",
        "examples": [
          "ASSOCIATEBY([1, 2, 3], $current + 1) // { 2: 1, 3: 2, 4: 3 }"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "AT",
        "autoCompleteValue": "AT(",
        "description": "Returns the element at the specified index. If the list is empty or the<br/>index is out of bounds, this function will return null.<br/>Accepts 2 arguments: the list to evaluate and the index to return.",
        "examples": [
          "AT([1, 2, 3], 1) // 2"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "AVERAGE",
        "autoCompleteValue": "AVERAGE(",
        "description": "Returns the average given a list of numbers.<br/>Accepts 1 argument: the list of numbers to evaluate.",
        "examples": [
          "AVERAGE(LIST(1, 2, 3))"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "DISTINCT",
        "autoCompleteValue": "DISTINCT(",
        "description": "Returns a list of unique values.",
        "examples": [
          "DISTINCT(LIST(1, 2, 3, 1, 2, 3)) // [1, 2, 3]"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "EVERY",
        "autoCompleteValue": "EVERY(",
        "description": "Returns true if every element in the list matches the given expression.<br/>Provides 1 special variable in the inner expression: `$current` (the current item being iterated over).<br/>Accepts 2 arguments: the list to evaluate and the expression to evaluate.",
        "examples": [
          "EVERY([1, 2, 3], $current > 0) // true"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "EXPAND",
        "autoCompleteValue": "EXPAND(",
        "description": "Expands each element of a list into zero or more elements, resulting from the<br/>evaluation of the given expression.<br/>Provides 1 special variable in the inner expression: `$current` (the current item being iterated over).<br/>Accepts 2 arguments: the list to evaluate and the expression to evaluate. The expression<br/>must return a list.",
        "examples": [
          "EXPAND([1, 2, 3], LIST($current, $current + 1)) // [1, 2, 2, 3, 3, 4]"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "FIRST",
        "autoCompleteValue": "FIRST(",
        "description": "Returns the first element in a list.<br/>Accepts 1 argument: the list to evaluate.",
        "examples": [
          "FIRST(LIST(1, 2, 3)) // 1"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "FIRSTWHERE",
        "autoCompleteValue": "FIRSTWHERE(",
        "description": "Returns the first element of a list that matches the given expression or null<br/>if the list is empty or no element matches the expression.<br/>Provides 1 special variable in the inner expression: `$current` (the current item being iterated over).<br/>Accepts 2 arguments: the list to evaluate and the expression to evaluate.",
        "examples": [
          "FIRSTWHERE([1, 2, 3], $current > 2) // 3"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "FLATTEN",
        "autoCompleteValue": "FLATTEN(",
        "description": "Flattens a list of lists into a single list.<br/>Accepts 1 argument: the list of lists to flatten.",
        "examples": [
          "FLATTEN([[1, 2], [3, 4]]) // [1, 2, 3, 4]"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "FOLLOWEDBY",
        "autoCompleteValue": "FOLLOWEDBY(",
        "description": "Appends a list to another list.<br/>Accepts 2 arguments: the list to append to and the list to append.",
        "examples": [
          "FOLLOWEDBY([1, 2, 3], [4, 5, 6]) // [1, 2, 3, 4, 5, 6]"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "GET",
        "autoCompleteValue": "GET(",
        "description": "Returns the value of a key in a map or the field in an SObject.<br/>Accepts 2 arguments: the map or SObject to evaluate and the key to get.",
        "examples": [
          "GET(MAP('a' => 1, 'b' => 2, 'c' => 3), 'a') // 1"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "GROUPBY",
        "autoCompleteValue": "GROUPBY(",
        "description": "Groups the elements of a list by the result of the given expression.<br/>Accepts 2 arguments: the list to evaluate and the expression to evaluate.<br/>Provides the following special variables in the inner expression:<br/>- `$current` (the current item being iterated over).",
        "examples": [
          "GROUPBY([\n  { \"FirstName\": \"John\", \"LastName\": \"Doe\" },\n  { \"FirstName\": \"Jane\", \"LastName\": \"Doe\" },\n  ], $current.LastName)\n// { \"Doe\": [{ \"FirstName\": \"John\", \"LastName\": \"Doe\" }, { \"FirstName\": \"Jane\", \"LastName\": \"Doe\" }] }"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "ISEMPTY",
        "autoCompleteValue": "ISEMPTY(",
        "description": "Returns true if the list or map is empty.<br/>Accepts 1 argument: the list or map to evaluate.",
        "examples": [
          "ISEMPTY(LIST(1, 2, 3)) // false"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "JOIN",
        "autoCompleteValue": "JOIN(",
        "description": "Joins a list of values into a string using the specified delimiter.<br/>Accepts 2 arguments: the list to join and the delimiter.",
        "examples": [
          "JOIN([1, 2, 3], \", \")"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "KEYS",
        "autoCompleteValue": "KEYS(",
        "description": "Returns a list of keys in a map.",
        "examples": [
          "KEYS(MAP('a' => 1, 'b' => 2, 'c' => 3)) // ['a', 'b', 'c']"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "LAST",
        "autoCompleteValue": "LAST(",
        "description": "Returns the last element in a list.<br/>Accepts 1 argument: the list to evaluate.",
        "examples": [
          "LAST(LIST(1, 2, 3)) // 3"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "LASTWHERE",
        "autoCompleteValue": "LASTWHERE(",
        "description": "Returns the last element of a list that matches the given expression or null<br/>if the list is empty or no element matches the expression.<br/>Provides 1 special variable in the inner expression: `$current` (the current item being iterated over).<br/>Accepts 2 arguments: the list to evaluate and the expression to evaluate.",
        "examples": [
          "LASTWHERE([1, 2, 3], $current > 2) // 3"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "LIST",
        "autoCompleteValue": "LIST(",
        "description": "Creates a list using the received arguments as the values.",
        "examples": [
          "LIST(1, 2, 3, ...LIST(4, 5, 6))"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "MAP",
        "autoCompleteValue": "MAP(",
        "description": "Maps to a list using the first argument as the context and the second argument as the expression to evaluate.<br/>Accepts 2 arguments: List of objects and an expression to evaluate.",
        "examples": [
          "MAP([\"a\", \"b\", \"c\"], UPPER($current))"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "PUT",
        "autoCompleteValue": "PUT(",
        "description": "Adds a key/value pair to a map.<br/>Accepts 3 arguments: the map to add to, the key to add, and the value to add.",
        "examples": [
          "PUT({ \"a\": 1, \"b\": 2, \"c\": 3 }, \"d\", 4) // { \"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4 }"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "RANGE",
        "autoCompleteValue": "RANGE(",
        "description": "Returns a list of numbers from the start to the end, inclusive.<br/>Accepts 2 arguments: the start and end numbers.",
        "examples": [
          "RANGE(1, 3) // [1, 2, 3]"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "REDUCE",
        "autoCompleteValue": "REDUCE(",
        "description": "Reduces a list to a single value using the first argument as the context, the second argument as the expression to evaluate,<br/>and the third argument as the initial value.<br/>Accepts 3 arguments: List of objects, an expression to evaluate, and the initial value.",
        "examples": [
          "REDUCE([1, 2, 3], $accumulator + $current, 0) // 6"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "SIZE",
        "autoCompleteValue": "SIZE(",
        "description": "Returns the number of elements in a list or map.<br/>Accepts 1 argument: the list or map to evaluate.",
        "examples": [
          "SIZE(LIST(1, 2, 3)) // 3"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "SKIP",
        "autoCompleteValue": "SKIP(",
        "description": "Skips the first N elements of a list.<br/>Accepts 2 arguments: the list to skip and the number of elements to skip.",
        "examples": [
          "SKIP([1, 2, 3], 2) // [3]"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "SKIPWHILE",
        "autoCompleteValue": "SKIPWHILE(",
        "description": "Skips elements of a list while the given expression evaluates to true.<br/>Provides 1 special variable in the inner expression: `$current` (the current item being iterated over).<br/>Accepts 2 arguments: the list to evaluate and the expression to evaluate.",
        "examples": [
          "SKIPWHILE([1, 2, 3], $current < 3) // [3]"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "SORT",
        "autoCompleteValue": "SORT(",
        "description": "Sorts a list.<br/>Accepts at least one argument: the list to sort.<br/>When sorting a list of Maps or a list of SObjects,<br/>three additional arguments can be provided: the field to sort by, the sort direction, and the position of nulls<br/>(nulls first or nulls last).<br/><br/>The field to sort can either be a field name as a merge field (field name without quotes), or an expression that evaluates to a string<br/>representing the field name. Merge fields are only supported when sorting SObjects and are useful to get the framework to automatically<br/>query the field for you.<br/><br/>Note: The merge field must be a field on the SObject being sorted itself, not a relationship field.<br/><br/>The sort direction can either be the literal string (requires quotes) `ASC` or `DESC`.<br/>The position of nulls can either be the literal string (requires quotes) `NULLS_FIRST` or `NULLS_LAST`.",
        "examples": [
          "SORT([{ \"a\": 3 }, { \"a\": 2 }, { \"a\": 1 }], \"a\", \"DESC\") // [{ \"a\": 3 }, { \"a\": 2 }, { \"a\": 1 }]\nSORT([SObject1, SObject2, SObject3], \"Name\", \"ASC\", \"NULLS_LAST\") // [SObject1, SObject2, SObject3]"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "SUM",
        "autoCompleteValue": "SUM(",
        "description": "Returns the sum of a list of numbers.<br/>Accepts 1 argument: the list of numbers to evaluate.",
        "examples": [
          "SUM([1, 2, 3]) // 6"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "TAKE",
        "autoCompleteValue": "TAKE(",
        "description": "Returns the first N elements of a list.<br/>Accepts 2 arguments: the list to take from and the number of elements to take.",
        "examples": [
          "TAKE([1, 2, 3], 2) // [1, 2]"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "TAKEWHILE",
        "autoCompleteValue": "TAKEWHILE(",
        "description": "Returns elements of a list while the given expression evaluates to true.<br/>Provides 1 special variable in the inner expression: `$current` (the current item being iterated over).<br/>Accepts 2 arguments: the list to evaluate and the expression to evaluate.",
        "examples": [
          "TAKEWHILE([1, 2, 3], $current < 3)"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "VALUES",
        "autoCompleteValue": "VALUES(",
        "description": "Returns a list of values in a map.",
        "examples": [
          "VALUES(MAP('a' => 1, 'b' => 2, 'c' => 3)) // [1, 2, 3]"
        ],
        "icon": "utility:justify_text"
      },
      {
        "name": "WHERE",
        "autoCompleteValue": "WHERE(",
        "description": "Filters a list using the first argument as the context and the second argument as the expression to evaluate.<br/>Accepts 2 arguments: List of objects and an expression to evaluate.",
        "examples": [
          "WHERE([1, 2, 3], $current > 1)"
        ],
        "icon": "utility:justify_text"
      }
    ]
  },
  {
    "category": "Data",
    "values": [
      {
        "name": "LET",
        "autoCompleteValue": "LET(",
        "description": "Allows you to define custom variables that can be used in the expression.<br/>Accepts 2 arguments: a map of variables to define and the expression to evaluate.<br/>The map keys should be the variable names prefixed with `$`.",
        "examples": [
          "LET({ \"$a\": 1, \"$b\": 2 }, $a + $b) // 3"
        ],
        "icon": "utility:data_mapping"
      },
      {
        "name": "RAWQUERY",
        "autoCompleteValue": "RAWQUERY(",
        "description": "Allows you to run a raw query against the database.<br/>Accepts 1 argument: the query to run.",
        "examples": [
          "RAWQUERY(\"SELECT Id, Name FROM Account LIMIT 10\")"
        ],
        "icon": "utility:data_mapping"
      },
      {
        "name": "TRANSFORM",
        "autoCompleteValue": "TRANSFORM(",
        "description": "Transforms any input using the provided expression.<br/>Provides a special variable `$source` in the inner expression that contains the original input.<br/><br/>Accepts 2 arguments: the input to transform and the expression to evaluate.",
        "examples": [
          "TRANSFORM(\"Hello World\", UPPER($source)) // \"HELLO WORLD\""
        ],
        "icon": "utility:data_mapping"
      }
    ]
  },
  {
    "category": "Date and Time",
    "values": [
      {
        "name": "ADDMONTHS",
        "autoCompleteValue": "ADDMONTHS(",
        "description": "Returns a date that is a specified number of months before or after a given date.<br/><br/>Accepts 2 arguments: the date and the number of months to add.",
        "examples": [
          "ADDMONTHS(DATE(2020, 1, 1), 1) // 2020-02-01"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "DATE",
        "autoCompleteValue": "DATE(",
        "description": "Returns a date value from the provided year, month, and day values.<br/><br/>Accepts 3 arguments: the year, month, and day.",
        "examples": [
          "DATE(2020, 1, 1) // 2020-01-01"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "DATETIME",
        "autoCompleteValue": "DATETIME(",
        "description": "Returns a datetime value from the provided year, month, day, hour, minute, and second values.<br/><br/>Accepts 6 arguments: the year, month, day, hour, minute, and second.",
        "examples": [
          "DATETIME(2020, 1, 1, 12, 0, 0) // 2020-01-01 12:00:00"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "DATETIMEFORMAT",
        "autoCompleteValue": "DATETIMEFORMAT(",
        "description": "Formats a DateTime into a string using the provided format.<br/><br/>Accepts 2 arguments: the DateTime to format and the format string.",
        "examples": [
          "DATETIMEFORMAT(DATETIMEVALUE(\"2020-01-01 12:00:00\"), \"yyyy-MM-dd\") // 2020-01-01"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "DATETIMEVALUE",
        "autoCompleteValue": "DATETIMEVALUE(",
        "description": "Returns a datetime value from a string representation of a date time.<br/><br/>Accepts 1 argument: the date time as a string.",
        "examples": [
          "DATETIMEVALUE(\"2020-01-01 00:00:00\") // 2020-01-01 00:00:00"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "DATETODATETIME",
        "autoCompleteValue": "DATETODATETIME(",
        "description": "Converts a Date to a Datetime.<br/><br/>Accepts 1 argument: the Date to convert.",
        "examples": [
          "DATETODATETIME(DATE(2020, 1, 1)) // 2020-01-01 00:00:00"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "DATEVALUE",
        "autoCompleteValue": "DATEVALUE(",
        "description": "Returns a date value from a string representation of a date or a datetime.<br/><br/>Accepts 1 argument: the date as a string or datetime.",
        "examples": [
          "DATEVALUE(\"2020-01-01\") // 2020-01-01"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "DAY",
        "autoCompleteValue": "DAY(",
        "description": "Returns the day of the month, a number from 1 to 31.<br/><br/>Accepts 1 argument: the date to evaluate.",
        "examples": [
          "DAY(DATE(2020, 1, 1)) // 1"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "DAYOFYEAR",
        "autoCompleteValue": "DAYOFYEAR(",
        "description": "Returns the day of the year, a number from 1 to 366.<br/><br/>Accepts 1 argument: the date to evaluate.",
        "examples": [
          "DAYOFYEAR(DATE(2020, 1, 1)) // 1"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "DAYSBETWEEN",
        "autoCompleteValue": "DAYSBETWEEN(",
        "description": "Returns the number of days between two dates.<br/><br/>Accepts 2 arguments: the first date and the second date.",
        "examples": [
          "DAYSBETWEEN(DATE(2020, 1, 1), DATE(2020, 1, 2)) // 1"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "FORMATDURATION",
        "autoCompleteValue": "FORMATDURATION(",
        "description": "Calculates the difference between 2 Times or 2 DateTimes<br/>and formats it as \"HH:MM:SS\".<br/><br/>Accepts 2 arguments: either 2 Times or 2 DateTimes.<br/><br/>Note that the order of the argument is not important, the<br/>function will always return a positive duration.",
        "examples": [
          "FORMATDURATION(TIMEVALUE(\"12:00:00\"), TIMEVALUE(\"12:00:01\")) // 00:00:01"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "FROMUNIXTIME",
        "autoCompleteValue": "FROMUNIXTIME(",
        "description": "Returns the GMT Datetime from a Unix timestamp.<br/><br/>Accepts 1 argument: the Unix timestamp to evaluate.",
        "examples": [
          "FROMUNIXTIME(1577836800) // 2020-01-01 00:00:00"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "HOUR",
        "autoCompleteValue": "HOUR(",
        "description": "Returns the hour value of a provided time.<br/><br/>Accepts 1 argument: the time to evaluate.",
        "examples": [
          "HOUR(TIMEVALUE(\"12:00:00\")) // 12"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "ISOWEEK",
        "autoCompleteValue": "ISOWEEK(",
        "description": "Returns the ISO week number of the year for a given date.<br/><br/>Accepts 1 argument: the date to evaluate.",
        "examples": [
          "ISOWEEK(DATE(2020, 1, 1)) // 1"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "ISOYEAR",
        "autoCompleteValue": "ISOYEAR(",
        "description": "Returns the ISO year number for a given date.<br/><br/>Accepts 1 argument: the date to evaluate.",
        "examples": [
          "ISOYEAR(DATE(2020, 1, 1)) // 2020"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "MILLISECOND",
        "autoCompleteValue": "MILLISECOND(",
        "description": "Returns the millisecond value of a provided time.<br/><br/>Accepts 1 argument: the time to evaluate.",
        "examples": [
          "MILLISECOND(TIMEVALUE(\"12:00:00.123\")) // 123"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "MINUTE",
        "autoCompleteValue": "MINUTE(",
        "description": "Returns the minute value of a provided time.<br/><br/>Accepts 1 argument: the time to evaluate.",
        "examples": [
          "MINUTE(TIMEVALUE(\"12:10:00\")) // 10"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "MONTH",
        "autoCompleteValue": "MONTH(",
        "description": "Returns the month, a number between 1 and 12 (December) in number format of a given date.<br/><br/>Accepts 1 argument: the date to evaluate.",
        "examples": [
          "MONTH(DATE(2020, 1, 1)) // 1"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "NOW",
        "autoCompleteValue": "NOW(",
        "description": "Returns the current Datetime in the GMT time zone.<br/><br/>Accepts no arguments.",
        "examples": [
          "NOW() // 2020-01-01 00:00:00"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "SECOND",
        "autoCompleteValue": "SECOND(",
        "description": "Returns the second value of a provided time.<br/><br/>Accepts 1 argument: the time to evaluate.",
        "examples": [
          "SECOND(TIMEVALUE(\"12:00:45\")) // 45"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "TIMENOW",
        "autoCompleteValue": "TIMENOW(",
        "description": "Returns the current time.<br/><br/>Accepts no arguments.",
        "examples": [
          "TIMENOW() // 12:00:00"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "TIMEVALUE",
        "autoCompleteValue": "TIMEVALUE(",
        "description": "Returns a time value from a datetime or from a string representation of a datetime.<br/><br/>Accepts 1 argument: the datetime or string in datetime format to evaluate.",
        "examples": [
          "TIMEVALUE(DATETIMEVALUE(\"2020-01-01 12:00:00\")) // 12:00:00"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "TODAY",
        "autoCompleteValue": "TODAY(",
        "description": "Returns the current date.<br/><br/>Accepts no arguments.",
        "examples": [
          "TODAY() // 2020-01-01"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "UNIXTIMESTAMP",
        "autoCompleteValue": "UNIXTIMESTAMP(",
        "description": "Returns the number of seconds since 1 Jan 1970 for the given date or datetime,<br/>             or number of seconds in the day for a time.<br/><br/>Values are returned in the GMT time zone.<br/><br/>Accepts 1 argument: the date, datetime, or time to evaluate.",
        "examples": [
          "UNIXTIMESTAMP(DATE(2020, 1, 1)) // 1577836800"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "WEEKDAY",
        "autoCompleteValue": "WEEKDAY(",
        "description": "Returns the day of the week for the given date,<br/>             using 1 for Sunday, 2 for Monday, through 7 for Saturday.<br/><br/>Accepts 1 argument: the date to evaluate.",
        "examples": [
          "WEEKDAY(DATE(2020, 1, 1)) // 2"
        ],
        "icon": "utility:date_input"
      },
      {
        "name": "YEAR",
        "autoCompleteValue": "YEAR(",
        "description": "Returns the year value of a provided date.<br/><br/>Accepts 1 argument: the date to evaluate.",
        "examples": [
          "YEAR(DATE(2020, 1, 1)) // 2020"
        ],
        "icon": "utility:date_input"
      }
    ]
  },
  {
    "category": "Location",
    "values": [
      {
        "name": "DISTANCE",
        "autoCompleteValue": "DISTANCE(",
        "description": "Returns the distance between two locations in the specified unit.<br/><br/>Accepts 3 arguments: the first location, the second location, and the unit (either<br/>`\"mi\"` or `\"km\"`).",
        "examples": [
          "DISTANCE(LOCATION(37.7749, 122.4194), LOCATION(40.7128, 74.0060), \"mi\") // 2565.6985207767134"
        ],
        "icon": "utility:pin"
      },
      {
        "name": "LOCATION",
        "autoCompleteValue": "LOCATION(",
        "description": "Returns a location object from the provided latitude and longitude.<br/><br/>Accepts 2 arguments: the latitude and longitude.",
        "examples": [
          "LOCATION(37.7749, 122.4194) // { \"latitude\": 37.7749, \"longitude\": 122.4194 }"
        ],
        "icon": "utility:pin"
      }
    ]
  },
  {
    "category": "Logical",
    "values": [
      {
        "name": "AND",
        "autoCompleteValue": "AND(",
        "description": "Returns a TRUE response if all values are true; returns a FALSE response if one or more values are false.<br/><br/>Accepts multiple arguments, but must have at least 2.",
        "examples": [
          "AND(true, false, true) // false"
        ],
        "icon": "utility:check"
      },
      {
        "name": "BLANKVALUE",
        "autoCompleteValue": "BLANKVALUE(",
        "description": "Returns a specified value if the expression is blank (null value or empty string); otherwise, returns the result of the<br/>expression.<br/><br/>Accepts 2 arguments: the expression and the value to return if the expression is blank.",
        "examples": [
          "BLANKVALUE(null, \"Hello\") // \"Hello\""
        ],
        "icon": "utility:check"
      },
      {
        "name": "CASE",
        "autoCompleteValue": "CASE(",
        "description": "Compares a given expression to a set of values. If the expression matches a value, the corresponding value is returned,<br/>otherwise the default value is returned.<br/><br/>Accepts any number of arguments where the first is the expression to evaluate, the last is the \"else\" case<br/>and in between each pair of arguments is a value to compare against and the value to return if the expression matches.<br/>Format: `CASE(expression,value1, result1, value2, result2,..., else_result)`",
        "examples": [
          "CASE(Rating, \"Hot\", \"🔥\", \"Cold\", \"🧊\", \"🤷\") // \"🔥\", \"🧊\", or \"🤷\""
        ],
        "icon": "utility:check"
      },
      {
        "name": "IF",
        "autoCompleteValue": "IF(",
        "description": "Returns one value if a condition is true and another value if it's false.<br/><br/>Accepts 3 arguments: the condition, the value if true, and the value if false.",
        "examples": [
          "IF(true, \"Hello\", \"World\") // \"Hello\"\nIF(false, \"Hello\", \"World\") // \"World\""
        ],
        "icon": "utility:check"
      },
      {
        "name": "ISBLANK",
        "autoCompleteValue": "ISBLANK(",
        "description": "Returns TRUE if the expression is blank (null value or empty string); otherwise, returns FALSE.<br/><br/>Accepts 1 argument: the expression to check.",
        "examples": [
          "ISBLANK(null) // true\nISBLANK(\"\") // true\nISBLANK(\"Hello\") // false"
        ],
        "icon": "utility:check"
      },
      {
        "name": "ISNUMBER",
        "autoCompleteValue": "ISNUMBER(",
        "description": "Returns TRUE if the expression is a number; otherwise, returns FALSE.<br/><br/>Accepts 1 argument: the expression to check.",
        "examples": [
          "ISNUMBER(1) // true\nISNUMBER(\"Hello\") // false"
        ],
        "icon": "utility:check"
      },
      {
        "name": "NOT",
        "autoCompleteValue": "NOT(",
        "description": "Reverses the logical value of its argument.<br/><br/>Accepts 1 argument.",
        "examples": [
          "NOT(true) // false"
        ],
        "icon": "utility:check"
      },
      {
        "name": "OR",
        "autoCompleteValue": "OR(",
        "description": "Returns a TRUE response if any value is true; returns a FALSE response if all values are false.<br/><br/>Accepts any number of arguments.",
        "examples": [
          "OR(true, false, true) // true\nOR(false, false, false) // false"
        ],
        "icon": "utility:check"
      }
    ]
  },
  {
    "category": "Math",
    "values": [
      {
        "name": "ABS",
        "autoCompleteValue": "ABS(",
        "description": "Returns the absolute value of a number.<br/><br/>Accepts 1 argument: the number to evaluate.",
        "examples": [
          "ABS(-1) // 1"
        ],
        "icon": "utility:advanced_function"
      },
      {
        "name": "CEILING",
        "autoCompleteValue": "CEILING(",
        "description": "Returns the smallest integer greater than or equal to the specified number.<br/><br/>Accepts 1 argument: the number to evaluate.",
        "examples": [
          "CEILING(1.5) // 2"
        ],
        "icon": "utility:advanced_function"
      },
      {
        "name": "FLOOR",
        "autoCompleteValue": "FLOOR(",
        "description": "Returns the largest integer less than or equal to the specified number.<br/><br/>Accepts 1 argument: the number to evaluate.",
        "examples": [
          "FLOOR(1.5) // 1"
        ],
        "icon": "utility:advanced_function"
      },
      {
        "name": "MAX",
        "autoCompleteValue": "MAX(",
        "description": "Returns the largest value in a list of numbers.<br/><br/>Accepts either a list of numbers as a single argument, or multiple numerical arguments.",
        "examples": [
          "MAX(1, 2, 3) // 3\nMAX([1, 2, 3]) // 3"
        ],
        "icon": "utility:advanced_function"
      },
      {
        "name": "MIN",
        "autoCompleteValue": "MIN(",
        "description": "Returns the smallest value in a list of numbers.<br/><br/>Accepts either a list of numbers as a single argument, or multiple numerical arguments.",
        "examples": [
          "MIN(1, 2, 3) // 1\nMIN([1, 2, 3]) // 1"
        ],
        "icon": "utility:advanced_function"
      },
      {
        "name": "MOD",
        "autoCompleteValue": "MOD(",
        "description": "Returns the remainder of one number divided by another.<br/><br/>Accepts 2 arguments: the dividend and the divisor.",
        "examples": [
          "MOD(5, 2) // 1"
        ],
        "icon": "utility:advanced_function"
      },
      {
        "name": "ROUND",
        "autoCompleteValue": "ROUND(",
        "description": "Returns a rounded number. Optionally specify the number of decimal places to round to.<br/><br/>Accepts 1 or 2 arguments: the number to round and optionally the number of decimal places to round to.",
        "examples": [
          "ROUND(1.234) // 1\nROUND(1.234, 2) // 1.23"
        ],
        "icon": "utility:advanced_function"
      },
      {
        "name": "TRUNC",
        "autoCompleteValue": "TRUNC(",
        "description": "Returns a truncated number. Optionally specify the number of decimal places to truncate to.<br/><br/>Accepts 1 or 2 arguments: the number to truncate and optionally the number of decimal places to truncate to.",
        "examples": [
          "TRUNC(1.234) // 1\nTRUNC(1.234, 2) // 1.23"
        ],
        "icon": "utility:advanced_function"
      }
    ]
  },
  {
    "category": "String",
    "values": [
      {
        "name": "BEGINS",
        "autoCompleteValue": "BEGINS(",
        "description": "Returns TRUE if the first character(s) in a text field match a given string.<br/><br/>Accepts 2 arguments: the text field and the string to match.",
        "examples": [
          "BEGINS(\"Hello World\", \"Hello\") // TRUE"
        ],
        "icon": "utility:text"
      },
      {
        "name": "BR",
        "autoCompleteValue": "BR(",
        "description": "Inserts a line break in a string of text.<br/><br/>When no arguments are provided, it inserts a line break. When a number is provided, it inserts that number of line<br/><br/>⚠️ Note that the inserted line break depends on the call context based on the<br/>[Request Quiddity](https://developer.salesforce.com/docs/atlas.en-us.apexref.meta/apexref/apex_enum_System_Quiddity.htm). When called from<br/>an Aura/LWC or Visualforce context it will insert a `<br>` tag, otherwise it will insert a newline character.",
        "examples": [
          "BR() // \"<br/>\"\nBR(2) // \"<br/><br/>\""
        ],
        "icon": "utility:text"
      },
      {
        "name": "CONTAINS",
        "autoCompleteValue": "CONTAINS(",
        "description": "Returns TRUE if a text field contains a given string.<br/><br/>Accepts 2 arguments: the text field and the string to match.",
        "examples": [
          "CONTAINS(\"Hello World\", \"World\") // TRUE"
        ],
        "icon": "utility:text"
      },
      {
        "name": "FIND",
        "autoCompleteValue": "FIND(",
        "description": "Returns the starting position of one text string within another text string. If the text string is not found, FIND<br/>returns a value -1.<br/><br/>Accepts either 2 or 3 arguments: the text to find, the text to search, and optionally the starting position.",
        "examples": [
          "FIND(\"World\", \"Hello World\") // 7\nFIND(\"World\", \"Hello World\", 7) // -1"
        ],
        "icon": "utility:text"
      },
      {
        "name": "HYPERLINK",
        "autoCompleteValue": "HYPERLINK(",
        "description": "Returns a text string of an HTML anchor tag that displays a hyperlink.<br/><br/>Accepts 2 or 3 arguments: the URL and the text to display. Optionally, the third argument is the target<br/>of the link.<br/><br/>The target should be one of `_blank`, `_parent`, `_self`, or `_top`.",
        "examples": [
          "HYPERLINK(\"https://www.google.com\", \"Google\") // \"<a href=\"https://www.google.com\">Google</a>\""
        ],
        "icon": "utility:text"
      },
      {
        "name": "INITCAP",
        "autoCompleteValue": "INITCAP(",
        "description": "Converts the first letter of each word in a text string to uppercase and converts all other letters to lowercase.<br/><br/>Accepts 1 argument: the text to convert.",
        "examples": [
          "INITCAP(\"hello world\") // \"Hello World\""
        ],
        "icon": "utility:text"
      },
      {
        "name": "LEFT",
        "autoCompleteValue": "LEFT(",
        "description": "Returns the specified number of characters from the beginning of a text string.<br/><br/>Accepts 2 arguments: the text to evaluate and the number of characters to return.",
        "examples": [
          "LEFT(\"Hello World\", 5) // \"Hello\""
        ],
        "icon": "utility:text"
      },
      {
        "name": "LEN",
        "autoCompleteValue": "LEN(",
        "description": "Returns the number of characters in a text string.<br/><br/>Accepts 1 argument: the text to evaluate.",
        "examples": [
          "LEN(\"Hello World\") // 11"
        ],
        "icon": "utility:text"
      },
      {
        "name": "LIKE",
        "autoCompleteValue": "LIKE(",
        "description": "Returns TRUE if a text field matches a given pattern.<br/>The pattern can include regular characters and wildcard characters.<br/>The supported wildcard characters are the percent sign (%), which matches zero or more characters, and the underscore (_),<br/>which matches exactly one character.<br/><br/>Accepts 2 arguments: the text field and the pattern to match.",
        "examples": [
          "LIKE(\"Hello World\", \"Hello%\") // TRUE\nLIKE(\"Hello World\", \"Hello_\") // FALSE"
        ],
        "icon": "utility:text"
      },
      {
        "name": "LOWER",
        "autoCompleteValue": "LOWER(",
        "description": "Converts all letters in the specified text to lowercase.<br/><br/>Accepts 1 argument: the text to convert.",
        "examples": [
          "LOWER(\"Hello World\") // \"hello world\""
        ],
        "icon": "utility:text"
      },
      {
        "name": "LPAD",
        "autoCompleteValue": "LPAD(",
        "description": "Returns a text value padded to the specified length with the specified set of characters.<br/><br/>Accepts 2 or 3 arguments: the text to pad, the length to pad to, and optionally the padding character.<br/>If the padding character is not specified, it defaults to a space.",
        "examples": [
          "LPAD(\"Hello\", 10) // \"     Hello\"\nLPAD(\"Hello\", 10, \"*\") // \"*****Hello\""
        ],
        "icon": "utility:text"
      },
      {
        "name": "MID",
        "autoCompleteValue": "MID(",
        "description": "Returns a specified number of characters from a text string starting at the position you specify up<br/>to the number of characters you specify.<br/><br/>Note that the position is 1-based, not 0-based.<br/><br/>Accepts 3 arguments: the text to evaluate, the starting position, and the number of characters to return.",
        "examples": [
          "MID(\"Hello World\", 7, 5) // \"World\""
        ],
        "icon": "utility:text"
      },
      {
        "name": "REVERSE",
        "autoCompleteValue": "REVERSE(",
        "description": "Returns a text value with the order of the characters reversed.<br/><br/>Accepts 1 argument: the text to reverse.",
        "examples": [
          "REVERSE(\"Hello World\") // \"dlroW olleH\""
        ],
        "icon": "utility:text"
      },
      {
        "name": "RIGHT",
        "autoCompleteValue": "RIGHT(",
        "description": "Returns the specified number of characters from the end of a text string.<br/><br/>Accepts 2 arguments: the text to evaluate and the number of characters to return.<br/><br/>If the second argument is a negative number, it gets treated as a 0",
        "examples": [
          "RIGHT(\"Hello World\", 5) // \"World\"\nRIGHT(\"Hello World\", -5) // \"\""
        ],
        "icon": "utility:text"
      },
      {
        "name": "RPAD",
        "autoCompleteValue": "RPAD(",
        "description": "Returns a text value padded to the specified length with the specified set of characters.<br/><br/>Accepts 2 or 3 arguments: the text to pad, the length to pad to, and optionally the padding character.<br/>If the padding character is not specified, it defaults to a space.",
        "examples": [
          "RPAD(\"Hello\", 10) // \"Hello     \"\nRPAD(\"Hello\", 10, \"*\") // \"Hello*****\""
        ],
        "icon": "utility:text"
      },
      {
        "name": "SPLIT",
        "autoCompleteValue": "SPLIT(",
        "description": "Returns a list that contains each substring of the String that is terminated<br/>by the provided delimiter.<br/><br/>Accepts 2 arguments: the text to split and the delimiter.",
        "examples": [
          "SPLIT(\"Hello World\", \" \") // [\"Hello\", \"World\"]"
        ],
        "icon": "utility:text"
      },
      {
        "name": "SUBSTITUTE",
        "autoCompleteValue": "SUBSTITUTE(",
        "description": "Substitutes new text for old text in a text string.<br/><br/>Accepts 3 arguments: the text to evaluate, the text to replace, and the text to replace it with.",
        "examples": [
          "SUBSTITUTE(\"Hello World\", \"World\", \"Universe\") // \"Hello Universe\""
        ],
        "icon": "utility:text"
      },
      {
        "name": "SUBSTRING",
        "autoCompleteValue": "SUBSTRING(",
        "description": "Returns a specified number of characters from a text string starting at the position you specify.<br/>Optionally, you can specify the number of characters to return.<br/><br/>Note that the position is 1-based, not 0-based.<br/><br/>Accepts 2 or 3 arguments: the text to evaluate and the starting position. Optionally, the number of characters to.",
        "examples": [
          "SUBSTRING(\"Hello World\", 7) // \"World\"\nSUBSTRING(\"Hello World\", 7, 5) // \"World\""
        ],
        "icon": "utility:text"
      },
      {
        "name": "TEXT",
        "autoCompleteValue": "TEXT(",
        "description": "Converts a value to text.<br/><br/>Accepts 1 argument: the value to convert.",
        "examples": [
          "TEXT(123) // \"123\""
        ],
        "icon": "utility:text"
      },
      {
        "name": "TRIM",
        "autoCompleteValue": "TRIM(",
        "description": "Removes the spaces and tabs from the beginning and end of a text string.<br/><br/>Accepts 1 argument: the text to trim.",
        "examples": [
          "TRIM(\" Hello World \") // \"Hello World\""
        ],
        "icon": "utility:text"
      },
      {
        "name": "UPPER",
        "autoCompleteValue": "UPPER(",
        "description": "Converts all letters in the specified text to uppercase.<br/><br/>Accepts 1 argument: the text to convert.",
        "examples": [
          "UPPER(\"Hello World\") // \"HELLO WORLD\""
        ],
        "icon": "utility:text"
      },
      {
        "name": "URLENCODE",
        "autoCompleteValue": "URLENCODE(",
        "description": "Encodes text and merge field values for use in URLs by replacing characters that are illegal in URLs, such as blank<br/>spaces.<br/><br/>Accepts 1 argument: the text to encode.",
        "examples": [
          "URLENCODE(\"Hello World\") // \"Hello+World\""
        ],
        "icon": "utility:text"
      },
      {
        "name": "VALUE",
        "autoCompleteValue": "VALUE(",
        "description": "Converts a text string that represents a number to a number.<br/><br/>Accepts 1 argument: the text to convert.",
        "examples": [
          "VALUE(\"123\") // 123"
        ],
        "icon": "utility:text"
      }
    ]
  }
];